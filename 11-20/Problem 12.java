 
package problem12;
 
import java.util.*;
 

/*
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

public class Problem12 {

    
    public static void main(String[] args) {
       P12 p=new P12();
       Map<Integer,Integer> divisors = null;
    for(long i=1;;i++){
      divisors = p.getDivisors(p.getTriangleNumber(i));
      Collection<Integer> d=  divisors.values();
      int sum=1;
      for(Integer n : d){
          sum*=(n+1);
      }
      
     System.out.println(p.getTriangleNumber(i)+ " "+sum);
      if(sum>500){
        System.out.println(sum);
        break;
      }
      sum=1;
      divisors.clear();
      d.clear();
    }//end for
        
    }
    
}



class P12{
    
public long getTriangleNumber(long n)
{
    return (n*(n+1))/2;
}

public Map<Integer,Integer> getDivisors (long n)
{
    long number=n;
    HashMap <Integer,Integer > hash=new HashMap<>();
    int i=2;
    while (number != 1){
        if(number % i == 0){
            number=number/i;
          //  System.out.print(number +" "+i+"\n");
            if(hash.get(i)==null){
                hash.put(i , 1);
            }
            else{
                hash.put(i, hash.get(i) + 1);
            }
           i=2;
        }else {
            i++;
        }
        
    }
    return hash;
}


}